---
- name: Configuração básica de servidores Control-Node
  hosts: control_node
  become: yes
  vars_files:
    - ../vars/cluster.yaml

  tasks:
    - name: atualiza nome
      hostname:
        name: "control-node"

    - name: atualiza arquivos /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        line: "127.0.1.1 control-node"
        state: present

    # - name: Atualiza o cache e atualiza os pacotes
    #   become: yes
    #   apt:
    #     update_cache: yes
    #     upgrade: dist

    - name: Update system packages
      shell: apt update && apt upgrade -y

    - name: Install essential packages
      apt:
        name:
          - tcpdump
          - wget
          - lynx
          - curl
        state: present
        update_cache: yes

    - name: Cria banner personalizado
      copy:
        dest: /etc/banner.txt
        content: |
          ╔════════════════════════════════════════════════════════╗
          ║                     CONTROL-NODE                       ║
          ╠════════════════════════════════════════════════════════╣
          ║    Acesso restrito: somente usuários autorizados.      ║
          ╚════════════════════════════════════════════════════════╝
        mode: "0644"

    - name: Configura SSH para exibir o banner no login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Banner"
        line: "Banner /etc/banner.txt"
        state: present
        backup: yes

    - name: Configura SSH para permitir somente usuários autorizados
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?AllowUsers"
        line: "AllowUsers ubuntu"
        state: present
        backup: yes

    - name: Permite acesso via SSH apenas por chave pública
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PubkeyAuthentication"
        line: "PubkeyAuthentication yes"
        state: present
        backup: yes

    - name: Proibe acesso via SSH por senha
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication yes"
        line: "PasswordAuthentication no"
        state: present
        backup: yes

    - name: Reinicia o serviço SSH para aplicar mudanças
      service:
        name: ssh
        state: restarted

    - name: Baixa e instala K3s
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server --write-kubeconfig-mode 644
      args:
        creates: /etc/rancher/k3s/k3s.yaml

    - name: Aguarda a criação do token
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        timeout: 30

    - name: Copia token para a máquina local
      fetch:
        src: /var/lib/rancher/k3s/server/node-token
        dest: "{{ token_file }}"
        flat: true

    - name: Instala Argo CD no cluster
      shell: |
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Aguarda o namespace argocd ser criado
      shell: kubectl get ns argocd
      register: ns_check
      retries: 10
      delay: 3
      until: ns_check.rc == 0

    - name: Aguarda o ArgoCD server ficar disponível
      shell: |
        kubectl wait -n argocd --for=condition=Available deployment/argocd-server --timeout=180s
      register: argocd_ready
      retries: 5
      delay: 10
      until: argocd_ready.rc == 0

    - name: Aguarda o CRD Application do ArgoCD estar disponível
      shell: kubectl get crd applications.argoproj.io
      register: crd_check
      retries: 15
      delay: 4
      until: crd_check.rc == 0

    - name: Instala o Docker - dependências
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Adiciona a chave GPG do Docker
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Adiciona o repositório do Docker
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable

    - name: Instala o Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Inicia e habilita o serviço Docker
      service:
        name: docker
        state: started
        enabled: yes
